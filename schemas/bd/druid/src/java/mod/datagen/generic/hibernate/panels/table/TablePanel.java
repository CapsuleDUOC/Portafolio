//==============================================================================
//===
//===   TablePanel
//===
//===   Copyright (C) by Andrea Carboni, Damien Boucquey.
//===   This file may be distributed under the terms of the GPL license.
//==============================================================================

package mod.datagen.generic.hibernate.panels.table;

import javax.swing.JPanel;

import org.dlib.gui.FlexLayout;
import org.dlib.gui.TLabel;

import druid.util.gui.guardians.TComboBoxGuardian;
import druid.util.gui.guardians.TTextFieldGuardian;
import mod.datagen.generic.hibernate.TableSettings;
import mod.datagen.generic.hibernate.Util;

//==============================================================================

public class TablePanel extends JPanel
{
	private TTextFieldGuardian txtClassName = new TTextFieldGuardian("ClassName");
	private TTextFieldGuardian txtDiscrVal  = new TTextFieldGuardian("DiscriminValue");
	private TTextFieldGuardian txtSchema    = new TTextFieldGuardian("Schema");
	private TTextFieldGuardian txtProxy     = new TTextFieldGuardian("Proxy");
	private TTextFieldGuardian txtWhere     = new TTextFieldGuardian("Where");
	private TTextFieldGuardian txtPersister = new TTextFieldGuardian("Persister");
	private TTextFieldGuardian txtBatchSize = new TTextFieldGuardian("BatchSize");

	private TComboBoxGuardian  tcbPolymorph = new TComboBoxGuardian("Polymorphism");
	private TComboBoxGuardian  tcbOptimLock = new TComboBoxGuardian("OptimisticLock");

	private TComboBoxGuardian  tcbMutable   = Util.createYesNoDefGuardian("Mutable");
	private TComboBoxGuardian  tcbDynInsert = Util.createYesNoDefGuardian("DynamicInsert");
	private TComboBoxGuardian  tcbDynUpdate = Util.createYesNoDefGuardian("DynamicUpdate");
	private TComboBoxGuardian  tcbSelBefUpd = Util.createYesNoDefGuardian("SelectBeforeUpd");
	private TComboBoxGuardian  tcbLazy      = Util.createYesNoDefGuardian("Lazy");
	private TComboBoxGuardian  tcbGenIds    = Util.createYesNoDefGuardian("GenerateIds");
	private TComboBoxGuardian  tcbForKeys   = Util.createYesNoDefGuardian("ForeignKeys");

	//---------------------------------------------------------------------------

	public TablePanel()
	{
		FlexLayout flexL = new FlexLayout(2, 16);
		flexL.setColProp(1, FlexLayout.EXPAND);
		setLayout(flexL);

		add("0,0",  new TLabel("Class name"));
		add("0,1",  new TLabel("Discriminator"));
		add("0,2",  new TLabel("Schema"));
		add("0,3",  new TLabel("Proxy"));
		add("0,4",  new TLabel("Where"));
		add("0,5",  new TLabel("Persister"));
		add("0,6",  new TLabel("BatchSize"));
		add("0,7",  new TLabel("Polymorphism"));
		add("0,8",  new TLabel("Optimistic lock"));
		add("0,9",  new TLabel("Mutable instances"));
		add("0,10", new TLabel("Dynamic insert"));
		add("0,11", new TLabel("Dynamic update"));
		add("0,12", new TLabel("Select before update"));
		add("0,13", new TLabel("Lazy initialization"));
		add("0,14", new TLabel("Generate ids when possible"));
		add("0,15", new TLabel("Generate table relationships"));

		add("1,0,x",  txtClassName);
		add("1,1,x",  txtDiscrVal);
		add("1,2,x",  txtSchema);
		add("1,3,x",  txtProxy);
		add("1,4,x",  txtWhere);
		add("1,5,x",  txtPersister);
		add("1,6,x",  txtBatchSize);
		add("1,7,x",  tcbPolymorph);
		add("1,8,x",  tcbOptimLock);
		add("1,9,x",  tcbMutable);
		add("1,10,x", tcbDynInsert);
		add("1,11,x", tcbDynUpdate);
		add("1,12,x", tcbSelBefUpd);
		add("1,13,x", tcbLazy);
		add("1,14,x", tcbGenIds);
		add("1,15,x", tcbForKeys);

		tcbGenIds.setToolTipText("When checked, id is generated by Hibernate using native DBMS capability. "+
										 "Require the application to explicitly set the id before Save() otherwise.");

		tcbForKeys.setToolTipText("Generate one-to-many, many-to-one, etc mappings");

		//--- setup comboboxes

		tcbPolymorph.addItem(TableSettings.POLYMORPH_IMPLICIT, "Implicit");
		tcbPolymorph.addItem(TableSettings.POLYMORPH_EXPLICIT, "Explicit");
		tcbPolymorph.addItem(TableSettings.POLYMORPH_DEFAULT,  "Global setting");

		tcbOptimLock.addItem(TableSettings.OPTLOCK_NONE,    "None");
		tcbOptimLock.addItem(TableSettings.OPTLOCK_VERSION, "Version");
		tcbOptimLock.addItem(TableSettings.OPTLOCK_DIRTY,   "Dirty");
		tcbOptimLock.addItem(TableSettings.OPTLOCK_ALL,     "All");
		tcbOptimLock.addItem(TableSettings.OPTLOCK_DEFAULT, "Global setting");

		txtClassName.setToolTipText("If omitted, it is assumed as <package>.<table>");
	}

	//---------------------------------------------------------------------------

	public void refresh(TableSettings s)
	{
		txtClassName.refresh(s);
		txtDiscrVal .refresh(s);
		txtSchema   .refresh(s);
		txtProxy    .refresh(s);
		txtWhere    .refresh(s);
		txtPersister.refresh(s);
		txtBatchSize.refresh(s);

		tcbPolymorph.refresh(s);
		tcbOptimLock.refresh(s);
		tcbMutable  .refresh(s);
		tcbDynInsert.refresh(s);
		tcbDynUpdate.refresh(s);
		tcbSelBefUpd.refresh(s);
		tcbLazy     .refresh(s);
		tcbGenIds   .refresh(s);
		tcbForKeys  .refresh(s);
	}
}

//==============================================================================
